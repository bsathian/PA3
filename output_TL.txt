CUDA is supported
1 VGG 16 BN 
 2 VGG 19 BN 
 3 Resnet 34  
1 Freeze parameters
 2 Unfreeze parameters
VGG(
  (features): Sequential(
    (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace)
    (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace)
    (6): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (7): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (8): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (9): ReLU(inplace)
    (10): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (11): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (12): ReLU(inplace)
    (13): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (14): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (15): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (16): ReLU(inplace)
    (17): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (18): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (19): ReLU(inplace)
    (20): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (21): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (22): ReLU(inplace)
    (23): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (24): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (25): ReLU(inplace)
    (26): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (27): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (28): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (29): ReLU(inplace)
    (30): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (31): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (32): ReLU(inplace)
    (33): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (34): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (35): ReLU(inplace)
    (36): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (37): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (38): ReLU(inplace)
    (39): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (40): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (41): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (42): ReLU(inplace)
    (43): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (44): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (45): ReLU(inplace)
    (46): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (47): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (48): ReLU(inplace)
    (49): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (50): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (51): ReLU(inplace)
    (52): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace)
    (2): Dropout(p=0.5)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace)
    (5): Dropout(p=0.5)
    (6): Linear(in_features=4096, out_features=14, bias=True)
  )
)
Model on CUDA? True
initialised criterion and architecture!!
Entered the Training loop : epoch  0
Epoch 1, average minibatch 0 loss: 0.014
Epoch 1, average minibatch 50 loss: 0.204
Epoch 1, average minibatch 100 loss: 0.180
Epoch 1, average minibatch 150 loss: 0.174
Epoch 1, average minibatch 200 loss: 0.174
Epoch 1, average minibatch 250 loss: 0.174
Epoch 1, average minibatch 300 loss: 0.181
Epoch 1, average minibatch 350 loss: 0.175
Epoch 1, average minibatch 400 loss: 0.175
Epoch 1, average minibatch 450 loss: 0.177
Epoch 1, average minibatch 500 loss: 0.181
Epoch 1, average minibatch 550 loss: 0.177
Epoch 1, average minibatch 600 loss: 0.178
Epoch 1, average minibatch 650 loss: 0.177
Epoch 1, average minibatch 700 loss: 0.177
Epoch 1, average minibatch 750 loss: 0.178
Epoch 1, average minibatch 800 loss: 0.176
Epoch 1, average minibatch 0 loss: 0.145
Epoch 1, average minibatch 50 loss: 0.179
Epoch 1, average minibatch 100 loss: 0.179
Epoch 1, average minibatch 150 loss: 0.178
Epoch 1, average minibatch 200 loss: 0.179
Epoch 1, average minibatch 250 loss: 0.177
Epoch 1, average minibatch 300 loss: 0.177
Epoch 1, average minibatch 350 loss: 0.174
Epoch 1, average minibatch 400 loss: 0.175
Epoch 1, average minibatch 450 loss: 0.181
Epoch 1, average minibatch 500 loss: 0.180
Epoch 1, average minibatch 550 loss: 0.174
Epoch 1, average minibatch 600 loss: 0.176
Epoch 1, average minibatch 650 loss: 0.176
Epoch 1, average minibatch 700 loss: 0.177
Epoch 1, average minibatch 750 loss: 0.179
Epoch 1, average minibatch 800 loss: 0.183
Finished 1 epochs of training
Validation loss after  0  epochs= 40.541429027915
Training complete after 0 epochs
